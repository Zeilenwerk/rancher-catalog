lb:
  ports:
  - "${public_port}:8000"
  - "80:8000"
  labels:
    io.rancher.loadbalancer.ssl.ports: '${public_port}'
  tty: true
  image: rancher/load-balancer-service
  links:
  - drone-server:drone-server
  stdin_open: true

drone-healthcheck:
  image: rancher/drone-config:v0.1.0
  net: 'container:drone-server'
  volume_driver: convoy-gluster
  volumes:
    - drone-lib:/var/lib/drone
    - drone-etc:/etc/drone
    - drone-opt:/opt/rancher
  entrypoint: /giddyup health

drone-server:
  image: rancher/drone-config:v0.1.0
  volume_driver: convoy-gluster
  volumes:
    - drone-lib:/var/lib/drone
    - drone-etc:/etc/drone
    - drone-opt:/opt/rancher
  labels:
    io.rancher.sidekicks: drone-daemon, drone-healthcheck
  links:
    - db:database

drone-daemon:
  image: rancher/drone:0.4
  net: container:drone-server
  volume_driver: convoy-gluster
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - drone-lib:/var/lib/drone
    - drone-etc:/etc/drone
    - drone-opt:/opt/rancher
  entrypoint: /opt/rancher/rancher_entry.sh

db:
  image: postgres
  volume_driver: convoy-gluster
  volumes:
    - drone-db:/var/lib/postgresql/data
  labels:
    io.rancher.sidekicks: backup
  environment:
    POSTGRES_USER: drone
    POSTGRES_PASSWORD: "${db_pwd}"

backup:
  image: frekele/helicopterizer
  volume_driver: convoy-gluster
  volumes:
    - drone-db:/data
  restart: always
  command: backup --tarball
  environment:
    STORAGE_PROVIDER: AWS
    CRON_SCHEDULE: 0 3 * * *
    BACKUP_NAME: "drone-${remote_driver}"
    AWS_ACCESS_KEY_ID: "${aws_key}"
    AWS_SECRET_ACCESS_KEY: "${aws_secret}"
    AWS_S3_BUCKET_NAME: zw-drone-backups
    AWS_DEFAULT_REGION: eu-west-1
